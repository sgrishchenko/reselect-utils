(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{rMSj:function(e,t,s){"use strict";s.r(t),s.d(t,"_frontmatter",(function(){return c})),s.d(t,"default",(function(){return d}));var n=s("Fcif"),a=s("+I+c"),r=(s("mXGw"),s("/FXl")),o=s("TjRS"),c=(s("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/guides/bound-and-adapted-selectors.md"}});var p={_frontmatter:c},l=o.a;function d(e){var t=e.components,s=Object(a.a)(e,["components"]);return Object(r.b)(l,Object(n.a)({},p,s,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"bound--adapted-selectors"},"Bound & Adapted Selectors"),Object(r.b)("h2",{id:"bound-selector"},"Bound Selector"),Object(r.b)("p",null,"Some times you may need to bind your parametric selector with certain fixed properties. There is ",Object(r.b)("inlineCode",{parentName:"p"},"Bound Selector")," helper for these cases. For example, you have this normalized state:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const state = {\n  messages: {\n    input: {\n      100: {\n        id: 100,\n        text: 'Hello',\n      },\n      200: {\n        id: 200,\n        text: 'Buy',\n      },\n    },\n    output: {\n      100: {\n        id: 100,\n        text: 'How are you?',\n      },\n      200: {\n        id: 200,\n        text: 'I am fine, and you?',\n      },\n    },\n  },\n};\n")),Object(r.b)("p",null,"And you have this selector:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { createCachedSelector } from 're-reselect';\nimport { prop } from 'reselect-utils';\n\nconst messagesSelector = (state: State) => state.messages;\n\nconst messageSelector = createCachedSelector(\n  messagesSelector,\n  prop<Props>().messageType(),\n  prop<Props>().messageId(),\n  (messages, messageType, messageId) => messages[messageType][messageId],\n)({\n  keySelector: (state, props) => `${props.messageType}:${props.messageId}`,\n});\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Prop Selector")," is described ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/reselect-utils/docz/guides/path-and-prop-selectors#prop-selector"}),"here"),". You can create a selector only for input or output messages using ",Object(r.b)("inlineCode",{parentName:"p"},"Bound Selector"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { createBoundSelector, bound } from 'reselect-utils';\n\nconst inputMessageSelector = createBoundSelector(messageSelector, {\n  messageType: 'input',\n});\n\ninputMessageSelector(state, { messageId: 100 }); // => { text: 'Hello', ... }\n\nconst outputMessageSelector = bound(messageSelector, { messageType: 'output' });\n\noutputMessageSelector(state, { messageId: 100 }); // => { text: 'How are you?', ... }\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"bound")," is short alias for ",Object(r.b)("inlineCode",{parentName:"p"},"Bound Selector"),"."),Object(r.b)("h2",{id:"adapted-selector"},"Adapted Selector"),Object(r.b)("p",null,"There is another problem with parametric selectors. Sometimes you have one interface of props but interface of selector you need is different. With ",Object(r.b)("inlineCode",{parentName:"p"},"Adapted Selector")," helper you can switch shape of selector properties. Imagine, that you need to write next selector:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"messageDiffSelector(state, { sourceMessageId, targetMessageId });\n")),Object(r.b)("p",null,"You can create it this way:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { createCachedSelector } from 're-reselect';\nimport { createAdaptedSelector, adapt } from 'reselect-utils';\n\nconst sourceMessageSelector = createAdaptedSelector(\n  inputMessageSelector,\n  (props: { sourceMessageId: number }) => ({\n    messageId: props.sourceMessageId,\n  }),\n);\n\nconst targetMessageSelector = adapt(\n  outputMessageSelector,\n  (props: { targetMessageId: number }) => ({\n    messageId: props.targetMessageId,\n  }),\n);\n\nconst messageDiffSelector = createCachedSelector(\n  sourceMessageSelector,\n  targetMessageSelector,\n  (sourceMessage, targetMessage) => ({\n    sourceMessage,\n    targetMessage,\n  }),\n)({\n  keySelector: (state, props) =>\n    `${props.sourceMessageId}:${props.targetMessageId}`,\n});\n")))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/guides/bound-and-adapted-selectors.md"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-guides-bound-and-adapted-selectors-md-a6a31680d21ef1065460.js.map