{"version":3,"sources":["webpack:///../docs/guides/composing-key-selector-creator.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,+NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kCADR,kCAGA,iBAAQ,CACN,GAAM,gBADR,gBAGA,8CAA6B,6BAAGC,WAAW,KAAQ,CAC/C,KAAQ,6DADiB,gBAA7B,OAEiC,6BAAGA,WAAW,KAAQ,CACnD,KAAQ,iDADqB,eAFjC,8HAKA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,myBAoCL,qEAAoD,0BAAYA,WAAW,KAAvB,kBAApD,uBAAsI,0BAAYA,WAAW,KAAvB,eAAtI,WAAyM,6BAAGA,WAAW,KAAQ,CAC3N,KAAQ,8EAD6L,iBAAzM,IAE+B,6BAAGA,WAAW,KAAQ,CACjD,KAAQ,iDADmB,eAF/B,uBAIgD,6BAAGA,WAAW,KAAQ,CAClE,KAAQ,oEADoC,wBAJhD,4CAM8E,0BAAYA,WAAW,KAAvB,eAN9E,yDAM+L,0BAAYA,WAAW,KAAvB,wBAN/L,KAMqQ,0BAAYA,WAAW,KAAvB,kCANrQ,yCAMyX,0BAAYA,WAAW,KAAvB,iBANzX,kDAMqe,0BAAYA,WAAW,KAAvB,KANre,0DAOA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8eAkBL,4BAAW,0BAAYA,WAAW,KAAvB,kCAAX,mIAAyN,0BAAYA,WAAW,KAAvB,gBAAzN,uBACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2XAYL,4BAAW,0BAAYA,WAAW,KAAvB,oBAAX,6BAAqG,0BAAYA,WAAW,KAAvB,YAArG,QAAkK,0BAAYA,WAAW,KAAvB,UAAlK,4BACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+LAYL,iBAAQ,CACN,GAAM,6BADR,6BAGA,wFAAuE,0BAAYA,WAAW,KAAvB,uBAAvE,YACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0zB,6NAwCTJ,EAAWK,gBAAiB","file":"component---docs-guides-composing-key-selector-creator-md-9811a89b33a5622973f5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/sgrishchenko/reselect-utils/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"composing-key-selector-creator\"\n    }}>{`Composing Key Selector Creator`}</h1>\n    <h2 {...{\n      \"id\": \"main-purpose\"\n    }}>{`Main Purpose`}</h2>\n    <p>{`There is a concept of `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/toomuchdesign/re-reselect#keyselector\"\n      }}>{`Key Selector`}</a>{` in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/toomuchdesign/re-reselect\"\n      }}>{`re-reselect`}</a>{`. It is working approach, but there are some limitations in straight forward using of this solution. Look at this example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const state = {\n  persons: {\n    1: {\n      id: 1,\n      firstName: 'Marry',\n      secondName: 'Poppins',\n    },\n    2: {\n      id: 2,\n      firstName: 'Harry',\n      secondName: 'Potter',\n    },\n  },\n};\n\nimport { createCachedSelector } from 're-reselect';\nimport { prop } from 'reselect-utils';\n\nconst personsSelector = (state: State) => state.persons;\n\nconst personSelector = createCachedSelector(\n  [personsSelector, prop<{ personId: number }>().personId()],\n  (persons, personId) => persons[personId],\n)({\n  keySelector: prop<{ personId: number }>().personId(),\n});\n\nconst fullNameSelector = createCachedSelector(\n  [personSelector],\n  ({ firstName, secondName }) => \\`\\${firstName} \\${secondName}\\`,\n)({\n  keySelector: prop<{ personId: number }>().personId(),\n});\n`}</code></pre>\n    <p>{`As you can see, every time, when we want use `}<inlineCode parentName=\"p\">{`personSelector`}</inlineCode>{`, we should declare `}<inlineCode parentName=\"p\">{`keySelector`}</inlineCode>{`. Since `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/toomuchdesign/re-reselect/blob/master/CHANGELOG.md#330\"\n      }}>{`3.3.0 version`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/toomuchdesign/re-reselect\"\n      }}>{`re-reselect`}</a>{` introduces special `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/toomuchdesign/re-reselect#keyselectorcreator\"\n      }}>{`Key Selector Creator`}</a>{` option. This option can help you reduce `}<inlineCode parentName=\"p\">{`keySelector`}</inlineCode>{` boiler plate. Reselect Utils offer implementation of `}<inlineCode parentName=\"p\">{`Key Selector Creator`}</inlineCode>{`: `}<inlineCode parentName=\"p\">{`Composing Key Selector Creator`}</inlineCode>{`. This implementation just merges all `}<inlineCode parentName=\"p\">{`Key Selecters`}</inlineCode>{` from selector dependencies and splits them by `}<inlineCode parentName=\"p\">{`:`}</inlineCode>{` sign. So, previous example can be rewritten next way:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { prop, composingKeySelectorCreator } from 'reselect-utils';\n\nconst personSelector = createCachedSelector(\n  [personsSelector, prop<{ personId: number }>().personId()],\n  (persons, personId) => persons[personId],\n)({\n  keySelector: prop<{ personId: number }>().personId(),\n});\n\nconst fullNameSelector = createCachedSelector(\n  [personSelector],\n  ({ firstName, secondName }) => \\`\\${firstName} \\${secondName}\\`,\n)({\n  keySelectorCreator: composingKeySelectorCreator,\n});\n`}</code></pre>\n    <p>{`But `}<inlineCode parentName=\"p\">{`Composing Key Selector Creator`}</inlineCode>{` don't detect props automatically, so every time, when you use some property in selector dependencies, you should declare it in `}<inlineCode parentName=\"p\">{`Key Selector`}</inlineCode>{`. See next example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { prop, composingKeySelectorCreator } from 'reselect-utils';\n\nconst fullNameSelector = createCachedSelector(\n  [personSelector, prop<{ prefix: string }>().prefix()],\n  ({ firstName, secondName }, prefix) => \\`\\${prefix} \\${firstName} \\${secondName}\\`,\n)({\n  keySelector: prop<{ prefix: number }>().prefix(),\n  keySelectorCreator: composingKeySelectorCreator,\n});\n`}</code></pre>\n    <p>{`Now `}<inlineCode parentName=\"p\">{`fullNameSelector`}</inlineCode>{` receives two properties: `}<inlineCode parentName=\"p\">{`personId`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`prefix`}</inlineCode>{`. It will work next way:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`fullNameSelector.keySelector(state, {\n  personId: 1,\n  prefix: 'Mr.',\n}); // => 'Mr.:1'\n\nfullNameSelector.keySelector(state, {\n  personId: 2,\n  prefix: 'Ms.',\n}); // => 'Ms.:2'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"key-selectors-composition\"\n    }}>{`Key Selectors Composition`}</h2>\n    <p>{`If you want use few props in selector dependencies, you can use `}<inlineCode parentName=\"p\">{`composeKeySelectors`}</inlineCode>{` helper:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import {\n  prop,\n  composeKeySelectors,\n  composingKeySelectorCreator,\n} from 'reselect-utils';\n\nconst fullNameSelector = createCachedSelector(\n  [\n    personSelector,\n    prop<{ prefix: string }>().prefix(),\n    prop<{ postfix: string }>().postfix(),\n  ],\n  ({ firstName, secondName }, prefix, postfix) =>\n    \\`\\${prefix} \\${firstName} \\${secondName} (\\${postfix})\\`,\n)({\n  keySelector: composeKeySelectors(\n    prop<{ prefix: number }>().prefix(),\n    prop<{ postfix: string }>().postfix(),\n  ),\n  keySelectorCreator: composingKeySelectorCreator,\n});\n\nfullNameSelector.keySelector(state, {\n  personId: 1,\n  prefix: 'Mr.',\n  postfix: 'father',\n}); // => 'Mr.:father:1'\n\nfullNameSelector.keySelector(state, {\n  personId: 2,\n  prefix: 'Ms.',\n  postfix: 'sister',\n}); // => 'Ms.:sister:2'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}