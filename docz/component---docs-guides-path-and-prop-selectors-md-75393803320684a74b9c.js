(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{s5sz:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return p})),n.d(t,"default",(function(){return i}));var r=n("Fcif"),o=n("+I+c"),s=(n("mXGw"),n("/FXl")),a=n("TjRS"),p=(n("aD51"),{});void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/guides/path-and-prop-selectors.md"}});var c={_frontmatter:p},l=a.a;function i(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(s.b)(l,Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"path--prop-selectors"},"Path & Prop Selectors"),Object(s.b)("h2",{id:"path-selectors"},"Path Selectors"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"Path Selector")," helper is useful when you try to describe deep nested dependencies of your selector. Suppose you have such state:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const state = {\n  person: {\n    id: 1,\n    firstName: 'Marry',\n    secondName: 'Poppins',\n  },\n};\n")),Object(s.b)("p",null,"Lets's write a simple selector for it:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const personFullNameSelector = createSelector(\n  (state) => state.person.firstName,\n  (state) => state.person.secondName,\n  (firstName, secondName) => `${firstName} ${secondName}`,\n);\n")),Object(s.b)("p",null,"It is working example and now we don't need any helper to implement it. But what if our ",Object(s.b)("inlineCode",{parentName:"p"},"person")," object is optional. We can re-write our example next way:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const personFullNameSelector = createSelector(\n  (state) => state.person && state.person.firstName,\n  (state) => state.person && state.person.secondName,\n  (firstName, secondName) => `${firstName} ${secondName}`,\n);\n")),Object(s.b)("p",null,"I can also use ",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/tc39/proposal-optional-chaining"}),"optional chaining")," to reduce and simplify code:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const personFullNameSelector = createSelector(\n  (state) => state.person?.firstName,\n  (state) => state.person?.secondName,\n  (firstName, secondName) => `${firstName} ${secondName}`,\n);\n")),Object(s.b)("p",null,"Yes, we still don't need any helper now. But what if we have normalized state with few optional persons:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const state = {\n  persons: {\n    1: {\n      id: 1,\n      firstName: 'Marry',\n      secondName: 'Poppins',\n    },\n    2: {\n      id: 2,\n      firstName: 'Harry',\n      secondName: 'Potter',\n    },\n  },\n};\n")),Object(s.b)("p",null,"In this case you need provide ",Object(s.b)("inlineCode",{parentName:"p"},"personId")," property in your selector. ",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/toomuchdesign/re-reselect"}),"Re-reselect")," library is better for parametric selector, so now we can write something like this:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { createCachedSelector } from 're-reselect';\n\nconst personFullNameSelector = createCachedSelector(\n  (state, props) => state.persons[props.personId]?.firstName,\n  (state, props) => state.persons[props.personId]?.secondName,\n  (firstName, secondName) => `${firstName} ${secondName}`,\n)({\n  keySelector: (state, props) => props.personId,\n});\n")),Object(s.b)("p",null,"If you use ",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.typescriptlang.org/"}),"TypeScript")," for static typing this example can look more complex:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const personFullNameSelector = createCachedSelector(\n  (state: State, props: Props) => state.persons[props.personId]?.firstName,\n  (state: State, props: Props) => state.persons[props.personId]?.secondName,\n  (firstName, secondName) => `${firstName} ${secondName}`,\n)({\n  keySelector: (state, props) => props.personId,\n});\n")),Object(s.b)("p",null,"Now we can use ",Object(s.b)("inlineCode",{parentName:"p"},"Path Selector")," to reduce boilerplate code:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import { createPathSelector } from 'reselect-utils';\n\nconst personsSelector = (state: State) => state.persons;\n\nconst personSelector = createCachedSelector(\n  personsSelector,\n  (state: State, props: Props) => props.personId,\n  (persons, personId) => persons[personId],\n)({\n  keySelector: (state, props) => props.personId,\n});\n\nconst personFullNameSelector = createCachedSelector(\n  createPathSelector(personSelector).firstName(),\n  createPathSelector(personSelector).secondName(),\n  (firstName, secondName) => `${firstName} ${secondName}`,\n)({\n  keySelector: (state, props) => props.personId,\n});\n")),Object(s.b)("h2",{id:"prop-selector"},"Prop Selector"),Object(s.b)("p",null,"There is another ",Object(s.b)("inlineCode",{parentName:"p"},"Prop Selector")," helper for properties selection. ",Object(s.b)("inlineCode",{parentName:"p"},"Prop Selector")," is built on top ",Object(s.b)("inlineCode",{parentName:"p"},"Path Selector"),". Also, there are short aliases for ",Object(s.b)("inlineCode",{parentName:"p"},"Prop Selector")," and ",Object(s.b)("inlineCode",{parentName:"p"},"Path Selector")," helper. With these helpers you can re-write your code like this:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import { path, prop } from 'reselect-utils';\n\nconst personsSelector = (state: State) => state.persons;\n\nconst personSelector = createCachedSelector(\n  personsSelector,\n  prop<Props>().personId(),\n  (persons, personId) => persons[personId],\n)({\n  keySelector: prop<Props>().personId(),\n});\n\nconst personFullNameSelector = createCachedSelector(\n  path(personSelector).firstName(),\n  path(personSelector).secondName(),\n  (firstName, secondName) => `${firstName} ${secondName}`,\n)({\n  keySelector: prop<Props>().personId(),\n});\n")),Object(s.b)("p",null,"You can set up default values in ",Object(s.b)("inlineCode",{parentName:"p"},"Path Selector"),", if you need:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const personFullNameSelector = createCachedSelector(\n  path(personSelector).firstName('John'), // <- Default value is used here\n  path(personSelector).secondName('Doe'), // <- and here\n  (firstName, secondName) => `${firstName} ${secondName}`,\n)({\n  keySelector: prop<Props>().personId(),\n});\n")),Object(s.b)("p",null,"Now we have fully typed selector, that is cached by different properties."),Object(s.b)("p",null,"You can also work with objects of unlimited nesting:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import { path } from 'reselect-utils';\n\nconst personSelectorInfo = createSelector(\n  path(personSelector).address.street('-'),\n  path(personSelector).some.very.deep.field(123),\n  (street, field) => ({ street, field }),\n)({\n  keySelector: prop<Props>().personProps.personId(),\n});\n")))}void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/guides/path-and-prop-selectors.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-guides-path-and-prop-selectors-md-75393803320684a74b9c.js.map